(Done but not much improvement in performance(reduces api call time by ~10ms) probably caz DB only has few documents)
Implement Caching for Updating (CachePut) Cartpuller & Rider location as well as for Getting them (Cache)
Can improve Cache Evict strategy in Order Service but current caching is good enough (End to end testing not done throughly)

(Scrapped since the project is taking too long, but instead of this we can have fields like `Carpuller search radius` & `rider search radius` in `Order`)Make assgining of order like old app (every 30s the next nearest cartpuller will get the order for grabs, we can do this by making a table and running a backround function and this table will have cartpullerID : List<Order> Map)

(Cancelled - if it works dont break it) Inside timer (started in init()) instead of calling setState() periodically and refreshing the build() method with future builder, use stream builder (in cartpuller & especially rider app)

(Done but might need to do more if it breaks again) Ngrok throttles connections per minute try switching to localtunnel.me or throttle the `Timers` use for polling in all the apps 

(Optional & hard) Distributed sourcing: allow sourcing of goods from multiple vendors to fulfil a order

Make one more folder cartpuller2-deployment in it make a single docker file that pulls the latest backend code from github 
and build the backend using docker compose inside the docker container 